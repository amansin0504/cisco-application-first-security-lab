#!/bin/bash

# Copyright (c) 2020 Cisco and/or its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#create EKS cluster
eksctl get clusters app-first-sec &> /dev/null
if [ $? -eq 0 ]; then
    echo $(eksctl get clusters app-first-sec)
    echo " "
    echo "-----------------------------------------------"
    echo "EKS Cluster with Sock Shop Application exists"
    echo "-----------------------------------------------"
else
    #eksctl create cluster --config-file $HOME/environment/lab/aws/eks-cluster.yaml
    echo " "
    echo "-----------------------------------------------"
    echo "EKS Cluster with Sock Shop Application Created"
    echo "-----------------------------------------------"
fi

#Deploy Sock Shop application
#kubectl apply -f $HOME/environment/lab/sock-shop/sock-shop-elb.yaml

# Mark your EKS cluster private and Allow SG communitcation from outside
# read answer
# if yes move forward else go back

#Login to Gitlab UI and Create Personal Access Token for api/git calls
echo " "
echo "####################################"
echo "=======GitLab Credentials======="
echo "Username: root"
echo "$(ssh -i ~/.ssh/$AWS_KEYPAIR_NAME ubuntu@$AWS_GITLAB_IP 'sudo grep Password: /etc/gitlab/initial_root_password')"
echo "=======GitLab Credentials======="
echo "Go to link http://$AWS_GITLAB_FQDN/-/profile/personal_access_tokens (Use the credentials above to login)"
echo "Generate a Private Access Token by adding api and write_repository permissions"
echo "Enter the Private Access Token:"
read GITLAB_TOKEN

#Create the Gitlab project
curl --header "Private-Token: $GITLAB_TOKEN" -X POST "http://$AWS_GITLAB_FQDN/api/v4/projects?name=Front-End" > /dev/null
echo " "
echo "----------------------------------"
echo "Created Gitlab Project - Front-End"
echo "----------------------------------"
echo " "

# Use Gitlab runner registration token to register a runner
echo "####################################"
echo "Go to link http://$AWS_GITLAB_FQDN/root/Front-End/-/settings/ci_cd"
echo "Expand the Runners section and copy the registration token"
echo "Enter the Gitlab Runner Registration token:"
read RUNNER_TOKEN

#Register a Gitlab runner for CICD pipeline
ssh -i ~/.ssh/$AWS_KEYPAIR_NAME ubuntu@$AWS_GITLAB_IP << EOF
sudo gitlab-runner register \
--non-interactive \
--url "http://$AWS_GITLAB_FQDN/" \
--registration-token $RUNNER_TOKEN \
--executor "docker" \
--docker-image alpine:3.14.0 \
--description "docker-runner" \
--docker-privileged \
--docker-volumes "/var/run/docker.sock:/var/run/docker.sock" \
--tag-list "docker"
EOF
echo " "
echo "----------------------------------"
echo "Gitlab Runner for CI/CD pipeline is registered now!"
echo "----------------------------------"
echo " "

#Add AWS environment variables for pipeline
echo "####################################"
export AWS_ACCESS_KEY=$(grep aws_access_key_id ~/.aws/credentials | awk '{ print $3 }')
export AWS_SECRET_ACCESS=$(grep aws_secret_access_key ~/.aws/credentials | awk '{ print $3 }')
curl --request POST  --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "http://$AWS_GITLAB_FQDN/api/v4/projects/2/variables" --form "key=AWS_ACCESS_KEY_ID" --form "value=$AWS_ACCESS_KEY" > /dev/null
curl --request POST  --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "http://$AWS_GITLAB_FQDN/api/v4/projects/2/variables" --form "key=AWS_SECRET_ACCESS_KEY" --form "value=$AWS_SECRET_ACCESS" > /dev/null
curl --request POST  --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "http://$AWS_GITLAB_FQDN/api/v4/projects/2/variables" --form "key=AWS_DEFAULT_REGION" --form "value=$AWS_REGION" > /dev/null
curl --request POST  --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "http://$AWS_GITLAB_FQDN/api/v4/projects/2/variables" --form "key=DOCKER_REGISTRY" --form "value=$DOCKER_REGISTRY" > /dev/null
echo " "
echo "------------------------------------------------------"
echo "Added the AWS environment variables (AWS_ACCESS_KEY, AWS_SECRET_ACCESS, AWS_DEFAULT_REGION, DOCKER_REGISTRY) for CI/CD Pipeline"
echo "------------------------------------------------------"
echo " "

#Set up the private Git Client Repo
echo "####################################"
cd /home/ec2-user/environment
git clone https://github.com/amansin0504/front-end.git Sock-Shop-Front-End && cd Sock-Shop-Front-End
git config --global user.name "Administrator" && git config --global user.email "admin@cloudnativeapp.com"
git remote rm origin && git remote add origin http://Administrator:$GITLAB_TOKEN@$AWS_GITLAB_FQDN/root/front-end.git
git push -u origin --all
echo " "
echo "------------------------------------------------------"
echo "Front-End local and remote repo (on private GitLab Instance) created"
echo "------------------------------------------------------"
echo " "

#Add the Sock Shop credentials and displace the access link
echo "####################################"
addshopuser
echo "export SOCK_SHOP_ELB=`kubectl get service front-end -n sock-shop -o json | jq -r '.status.loadBalancer.ingress[0].hostname'`" >> ~/.bashrc_lab ; source ~/.bashrc
echo "Sock Shop Access:"
echo $SOCK_SHOP_ELB
